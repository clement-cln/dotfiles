# --------------------------------- antigen --------------------------------- #
# Activate antigen
source $HOME/.antigen/antigen.zsh

# Use OMZ repo
antigen use oh-my-zsh

# Add plugins
antigen bundle archlinux
antigen bundle aws
antigen bundle git
antigen bundle docker
antigen bundle docker-compose
antigen bundle fzf
antigen bundle gcloud
antigen bundle golang
antigen bundle helm
antigen bundle kubectl
antigen bundle kubectl-autocomplete
antigen bundle kubectx
antigen bundle pip
antigen bundle python
antigen bundle uv
antigen bundle vscode
antigen bundle poetry

# Add syntax highlight and suggestion
antigen bundle zsh-users/zsh-autosuggestions
antigen bundle zsh-users/zsh-syntax-highlighting

# Antigen apply
antigen apply

# Create completion folder if missing, see: https://github.com/zsh-users/antigen/issues/688
# mkdir -p $HOME/.antigen/bundles/robbyrussell/oh-my-zsh/cache/completions

# ---------------------------------- shell ---------------------------------- #
# Starship
eval "$(starship init zsh)"

# fnm
eval "$(fnm env --use-on-cd --version-file-strategy=recursive --shell zsh)"

# I'm so clumsy
alias celar="echo door"

# xclip
alias to-clip="xclip -selection clipboard"

# zoxide
eval "$(zoxide init zsh)"
alias cd="z"

# OSX like file explorer command
function open(){
    nohup nautilus $1 >/dev/null 2>&1 &
}

# ------------------------------- kubernetes -------------------------------- #
compdef kubecolor=kubectl
alias k="kubecolor"
alias kctx="kubectx"

# --------------------------------- python ---------------------------------- #
# Poetry util
function poetry-fix-lock(){
    if [[ ! -d $1 ]]; then
        echo "No folder passed as argument"
        return 1
    fi

    poetry_projects=()
    find_poetry_projects=$(find $1 -name "*pyproject.toml" -not -path "./.git/*" -exec dirname {} \;)

    # Read each line into the array
    while IFS= read -r file; do
        poetry_projects+=("$file")
    done <<< "$find_poetry_projects"

    # User input for safeguard
    echo "Found ${#poetry_projects[@]} poetry projects in $(readlink -f $1)"
    echo "Proceed ? [y/n]"
    read -r ANS

    clean_ans=$(echo "$ANS" | tr '[:upper:]' '[:lower:]')
    if [[ ${clean_ans:0:1} == "y" ]]; then
        # Check and fix poetry projects
        for poetry_project in ${poetry_projects[@]}; do
            poetry_project_full=$(readlink -f $poetry_project)

            echo "> checking ${poetry_project}"
            poetry check --directory=$poetry_project_full || poetry lock --no-update --directory=$poetry_project_full
        done
    else
        return 0
    fi
}

# --------------------------------- docker ---------------------------------- #
docker() {
  case $1 in
    ps)
      shift
      command dops "$@"
      ;;
    *)
      command docker "$@";;
  esac
}

# ----------------------------------- git ----------------------------------- #
function git-list-untracked() {
    git fetch --prune && git branch -r | awk "{print \$1}" | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk "{print \$1}"
}

function git-remove-untracked(){
    case $1 in
    -f)
        shift
        git_branch_arg="-D"
        ;;
    *)
        git_branch_arg="-d";;
    esac

    git-list-untracked | xargs git branch $git_branch_arg
}

function glab-export-env(){
    case $1 in
    --help | -h)
        glab variable export --help
        ;;
    *)
    esac

    glab variable export "$@" | jq -r '.[] | "\(.key)=\"\(.value)\""' 1> .env
}

# ---------------------------------- local ---------------------------------- #
source ~/.zshrc.local