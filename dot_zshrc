# Pyenv setup
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# Go setup
export PATH=$PATH:/usr/local/go/bin

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  aws
  git
  docker
  docker-compose
  fzf
  gcloud
  golang
  helm
  kubectl
  kubectl-autocomplete
  kubectx
  pip
  pyenv
  python
  ubuntu
  vscode
  zsh-autosuggestions
  poetry
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
alias ll="ls -l"
export PATH="$PATH:$HOME/.local/bin"

# k8s config
alias k="kubectl"
alias kctx="kubectx"
export KUBE_EDITOR='code --wait'

# xclip
alias c="xclip -selection clipboard"

# Gitlab
export GITLAB_TOKEN=""
export GITLAB_USERNAME=""

# pip
export PIP_EXTRA_INDEX_URL="https://__token__:$GITLAB_TOKEN@git.sia-partners.com/api/v4/groups/444/-/packages/pypi/simple https://__token__:$GITLAB_TOKEN@git.sia-partners.com/api/v4/projects/867/packages/pypi/simple"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Brew
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

# I'm so clumsy
alias celar="echo door"

# Poetry util
function fix-poetry-lock(){
    if [[ ! -d $1 ]]; then
        echo "No folder passed as argument"
        return 1
    fi

    POETRY_PROJECTS=()
    FIND_POETRY_PROJECTS=$(find $1 -name "*pyproject.toml" -not -path "./.git/*" -exec dirname {} \;)

    # Read each line into the array
    while IFS= read -r file; do
        POETRY_PROJECTS+=("$file")
    done <<< "$FIND_POETRY_PROJECTS"

    # User input for safeguard
    echo "Found ${#POETRY_PROJECTS[@]} poetry projects in $(readlink -f $1)"
    echo "Proceed ? [y/n]"
    read -r ANS

    CLEAN_ANS=$(echo "$ANS" | tr '[:upper:]' '[:lower:]')
    if [[ ${CLEAN_ANS:0:1} == "y" ]]; then
        # Check and fix poetry projects
        for POETRY_PROJECT in ${POETRY_PROJECTS[@]}; do
            POETRY_PROJECT_FULL=$(readlink -f $POETRY_PROJECT)

            echo "> checking ${POETRY_PROJECT}"
            poetry check --directory=$POETRY_PROJECT_FULL || poetry lock --no-update --directory=$POETRY_PROJECT_FULL
        done
    else
        return 0
    fi
}

function init-scraping(){
    if [[ -z $1 ]]; then
        echo "No source passed"
        return 1
    fi

    # docker compose down
    # docker ps -aq | xargs -n 1 docker stop &>/dev/null
    # docker ps -aq | xargs -n 1 docker rm &>/dev/null

    export PROJECT_CONFIG=$(cat conf/project_config.yml)
    export PROVIDER_CREDENTIALS=$(cat conf/provider_credentials.json)
    export SOURCE=$1
}
