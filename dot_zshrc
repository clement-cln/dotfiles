##################################### gtk #####################################
export GTK_THEME=Adwaita-dark # Add the following to /etc/environment without the export statement if dark theme is not enforced

#################################### pyenv ####################################
# Pyenv setup
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

################################## oh-my-zsh ##################################
# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME=""

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  archlinux
  aws
  git
  docker
  docker-compose
  fzf
  gcloud
  golang
  helm
  kubectl
  kubectl-autocomplete
  kubectx
  pip
  pyenv
  python
  ubuntu
  vscode
  zsh-autosuggestions
  zsh-syntax-highlighting
  poetry
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

#################################### shell ####################################
# Starship
eval "$(starship init zsh)"

# nvm
source /usr/share/nvm/init-nvm.sh

# I'm so clumsy
alias celar="echo door"

# k8s config
alias k="kubectl"
alias kctx="kubectx"
export KUBE_EDITOR='code --wait'

# xclip
alias c="xclip -selection clipboard"

# zoxide
eval "$(zoxide init zsh)"
alias cd="z"

################################### python ####################################
# helper functions
function clean-path-name(){
    echo ${1//\//-}
}

function get-venv-name(){
    # venv name
    if [[ -z $1 ]]; then
        venv_name=$(basename $(pwd))
    else
        venv_name=$1
    fi
    venv_name=$(clean-path-name $venv_name)
    echo $venv_name
}

# pyenv wrapper
function venv-create(){
    # python version
    if [[ -z $1 ]]; then
        echo "Missing python version"
        return 1
    fi

    venv_name=$(get-venv-name $2)

    pyenv virtualenv $1 $venv_name && pyenv activate $venv_name
}

alias venv-list="pyenv virtualenvs"

function venv-activate(){
    venv_name=$(get-venv-name $1)
    pyenv activate $venv_name
}

function venv-delete(){
    venv_name=$(get-venv-name $1)
    pyenv virtualenv-delete $venv_name
}

# Poetry util
function fix-poetry-lock(){
    if [[ ! -d $1 ]]; then
        echo "No folder passed as argument"
        return 1
    fi

    poetry_projects=()
    find_poetry_projects=$(find $1 -name "*pyproject.toml" -not -path "./.git/*" -exec dirname {} \;)

    # Read each line into the array
    while IFS= read -r file; do
        poetry_projects+=("$file")
    done <<< "$find_poetry_projects"

    # User input for safeguard
    echo "Found ${#poetry_projects[@]} poetry projects in $(readlink -f $1)"
    echo "Proceed ? [y/n]"
    read -r ANS

    clean_ans=$(echo "$ANS" | tr '[:upper:]' '[:lower:]')
    if [[ ${clean_ans:0:1} == "y" ]]; then
        # Check and fix poetry projects
        for poetry_project in ${poetry_projects[@]}; do
            poetry_project_full=$(readlink -f $poetry_project)

            echo "> checking ${poetry_project}"
            poetry check --directory=$poetry_project_full || poetry lock --no-update --directory=$poetry_project_full
        done
    else
        return 0
    fi
}

# Created by `pipx` on 2024-04-29 12:13:33
export PATH="$PATH:/home/clement/.local/bin"
eval "$(register-python-argcomplete pipx)"

################################### docker ####################################
docker() {
  case $1 in
    ps)
      shift
      command dops "$@"
      ;;
    *)
      command docker "$@";;
  esac
}

#################################### local ####################################
source ~/.zshrc.local